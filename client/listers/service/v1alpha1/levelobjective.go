/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/service/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LevelObjectiveLister helps list LevelObjectives.
// All objects returned here must be treated as read-only.
type LevelObjectiveLister interface {
	// List lists all LevelObjectives in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LevelObjective, err error)
	// LevelObjectives returns an object that can list and get LevelObjectives.
	LevelObjectives(namespace string) LevelObjectiveNamespaceLister
	LevelObjectiveListerExpansion
}

// levelObjectiveLister implements the LevelObjectiveLister interface.
type levelObjectiveLister struct {
	indexer cache.Indexer
}

// NewLevelObjectiveLister returns a new LevelObjectiveLister.
func NewLevelObjectiveLister(indexer cache.Indexer) LevelObjectiveLister {
	return &levelObjectiveLister{indexer: indexer}
}

// List lists all LevelObjectives in the indexer.
func (s *levelObjectiveLister) List(selector labels.Selector) (ret []*v1alpha1.LevelObjective, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LevelObjective))
	})
	return ret, err
}

// LevelObjectives returns an object that can list and get LevelObjectives.
func (s *levelObjectiveLister) LevelObjectives(namespace string) LevelObjectiveNamespaceLister {
	return levelObjectiveNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LevelObjectiveNamespaceLister helps list and get LevelObjectives.
// All objects returned here must be treated as read-only.
type LevelObjectiveNamespaceLister interface {
	// List lists all LevelObjectives in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LevelObjective, err error)
	// Get retrieves the LevelObjective from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LevelObjective, error)
	LevelObjectiveNamespaceListerExpansion
}

// levelObjectiveNamespaceLister implements the LevelObjectiveNamespaceLister
// interface.
type levelObjectiveNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LevelObjectives in the indexer for a given namespace.
func (s levelObjectiveNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LevelObjective, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LevelObjective))
	})
	return ret, err
}

// Get retrieves the LevelObjective from the indexer for a given namespace and name.
func (s levelObjectiveNamespaceLister) Get(name string) (*v1alpha1.LevelObjective, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("levelobjective"), name)
	}
	return obj.(*v1alpha1.LevelObjective), nil
}
