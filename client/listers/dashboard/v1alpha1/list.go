/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/dashboard/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ListLister helps list Lists.
// All objects returned here must be treated as read-only.
type ListLister interface {
	// List lists all Lists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.List, err error)
	// Lists returns an object that can list and get Lists.
	Lists(namespace string) ListNamespaceLister
	ListListerExpansion
}

// listLister implements the ListLister interface.
type listLister struct {
	indexer cache.Indexer
}

// NewListLister returns a new ListLister.
func NewListLister(indexer cache.Indexer) ListLister {
	return &listLister{indexer: indexer}
}

// List lists all Lists in the indexer.
func (s *listLister) List(selector labels.Selector) (ret []*v1alpha1.List, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.List))
	})
	return ret, err
}

// Lists returns an object that can list and get Lists.
func (s *listLister) Lists(namespace string) ListNamespaceLister {
	return listNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ListNamespaceLister helps list and get Lists.
// All objects returned here must be treated as read-only.
type ListNamespaceLister interface {
	// List lists all Lists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.List, err error)
	// Get retrieves the List from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.List, error)
	ListNamespaceListerExpansion
}

// listNamespaceLister implements the ListNamespaceLister
// interface.
type listNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lists in the indexer for a given namespace.
func (s listNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.List, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.List))
	})
	return ret, err
}

// Get retrieves the List from the indexer for a given namespace and name.
func (s listNamespaceLister) Get(name string) (*v1alpha1.List, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("list"), name)
	}
	return obj.(*v1alpha1.List), nil
}
