/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/logs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArchiveOrderLister helps list ArchiveOrders.
// All objects returned here must be treated as read-only.
type ArchiveOrderLister interface {
	// List lists all ArchiveOrders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ArchiveOrder, err error)
	// ArchiveOrders returns an object that can list and get ArchiveOrders.
	ArchiveOrders(namespace string) ArchiveOrderNamespaceLister
	ArchiveOrderListerExpansion
}

// archiveOrderLister implements the ArchiveOrderLister interface.
type archiveOrderLister struct {
	indexer cache.Indexer
}

// NewArchiveOrderLister returns a new ArchiveOrderLister.
func NewArchiveOrderLister(indexer cache.Indexer) ArchiveOrderLister {
	return &archiveOrderLister{indexer: indexer}
}

// List lists all ArchiveOrders in the indexer.
func (s *archiveOrderLister) List(selector labels.Selector) (ret []*v1alpha1.ArchiveOrder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArchiveOrder))
	})
	return ret, err
}

// ArchiveOrders returns an object that can list and get ArchiveOrders.
func (s *archiveOrderLister) ArchiveOrders(namespace string) ArchiveOrderNamespaceLister {
	return archiveOrderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArchiveOrderNamespaceLister helps list and get ArchiveOrders.
// All objects returned here must be treated as read-only.
type ArchiveOrderNamespaceLister interface {
	// List lists all ArchiveOrders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ArchiveOrder, err error)
	// Get retrieves the ArchiveOrder from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ArchiveOrder, error)
	ArchiveOrderNamespaceListerExpansion
}

// archiveOrderNamespaceLister implements the ArchiveOrderNamespaceLister
// interface.
type archiveOrderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ArchiveOrders in the indexer for a given namespace.
func (s archiveOrderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ArchiveOrder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArchiveOrder))
	})
	return ret, err
}

// Get retrieves the ArchiveOrder from the indexer for a given namespace and name.
func (s archiveOrderNamespaceLister) Get(name string) (*v1alpha1.ArchiveOrder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("archiveorder"), name)
	}
	return obj.(*v1alpha1.ArchiveOrder), nil
}
