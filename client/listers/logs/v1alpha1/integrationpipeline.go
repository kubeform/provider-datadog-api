/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/logs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationPipelineLister helps list IntegrationPipelines.
// All objects returned here must be treated as read-only.
type IntegrationPipelineLister interface {
	// List lists all IntegrationPipelines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationPipeline, err error)
	// IntegrationPipelines returns an object that can list and get IntegrationPipelines.
	IntegrationPipelines(namespace string) IntegrationPipelineNamespaceLister
	IntegrationPipelineListerExpansion
}

// integrationPipelineLister implements the IntegrationPipelineLister interface.
type integrationPipelineLister struct {
	indexer cache.Indexer
}

// NewIntegrationPipelineLister returns a new IntegrationPipelineLister.
func NewIntegrationPipelineLister(indexer cache.Indexer) IntegrationPipelineLister {
	return &integrationPipelineLister{indexer: indexer}
}

// List lists all IntegrationPipelines in the indexer.
func (s *integrationPipelineLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationPipeline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationPipeline))
	})
	return ret, err
}

// IntegrationPipelines returns an object that can list and get IntegrationPipelines.
func (s *integrationPipelineLister) IntegrationPipelines(namespace string) IntegrationPipelineNamespaceLister {
	return integrationPipelineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationPipelineNamespaceLister helps list and get IntegrationPipelines.
// All objects returned here must be treated as read-only.
type IntegrationPipelineNamespaceLister interface {
	// List lists all IntegrationPipelines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationPipeline, err error)
	// Get retrieves the IntegrationPipeline from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationPipeline, error)
	IntegrationPipelineNamespaceListerExpansion
}

// integrationPipelineNamespaceLister implements the IntegrationPipelineNamespaceLister
// interface.
type integrationPipelineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationPipelines in the indexer for a given namespace.
func (s integrationPipelineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationPipeline, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationPipeline))
	})
	return ret, err
}

// Get retrieves the IntegrationPipeline from the indexer for a given namespace and name.
func (s integrationPipelineNamespaceLister) Get(name string) (*v1alpha1.IntegrationPipeline, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationpipeline"), name)
	}
	return obj.(*v1alpha1.IntegrationPipeline), nil
}
