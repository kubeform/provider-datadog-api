/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/synthetics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalVariableLister helps list GlobalVariables.
// All objects returned here must be treated as read-only.
type GlobalVariableLister interface {
	// List lists all GlobalVariables in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalVariable, err error)
	// GlobalVariables returns an object that can list and get GlobalVariables.
	GlobalVariables(namespace string) GlobalVariableNamespaceLister
	GlobalVariableListerExpansion
}

// globalVariableLister implements the GlobalVariableLister interface.
type globalVariableLister struct {
	indexer cache.Indexer
}

// NewGlobalVariableLister returns a new GlobalVariableLister.
func NewGlobalVariableLister(indexer cache.Indexer) GlobalVariableLister {
	return &globalVariableLister{indexer: indexer}
}

// List lists all GlobalVariables in the indexer.
func (s *globalVariableLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalVariable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalVariable))
	})
	return ret, err
}

// GlobalVariables returns an object that can list and get GlobalVariables.
func (s *globalVariableLister) GlobalVariables(namespace string) GlobalVariableNamespaceLister {
	return globalVariableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalVariableNamespaceLister helps list and get GlobalVariables.
// All objects returned here must be treated as read-only.
type GlobalVariableNamespaceLister interface {
	// List lists all GlobalVariables in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalVariable, err error)
	// Get retrieves the GlobalVariable from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GlobalVariable, error)
	GlobalVariableNamespaceListerExpansion
}

// globalVariableNamespaceLister implements the GlobalVariableNamespaceLister
// interface.
type globalVariableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalVariables in the indexer for a given namespace.
func (s globalVariableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalVariable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalVariable))
	})
	return ret, err
}

// Get retrieves the GlobalVariable from the indexer for a given namespace and name.
func (s globalVariableNamespaceLister) Get(name string) (*v1alpha1.GlobalVariable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("globalvariable"), name)
	}
	return obj.(*v1alpha1.GlobalVariable), nil
}
