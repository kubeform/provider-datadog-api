/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/synthetics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateLocationLister helps list PrivateLocations.
// All objects returned here must be treated as read-only.
type PrivateLocationLister interface {
	// List lists all PrivateLocations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateLocation, err error)
	// PrivateLocations returns an object that can list and get PrivateLocations.
	PrivateLocations(namespace string) PrivateLocationNamespaceLister
	PrivateLocationListerExpansion
}

// privateLocationLister implements the PrivateLocationLister interface.
type privateLocationLister struct {
	indexer cache.Indexer
}

// NewPrivateLocationLister returns a new PrivateLocationLister.
func NewPrivateLocationLister(indexer cache.Indexer) PrivateLocationLister {
	return &privateLocationLister{indexer: indexer}
}

// List lists all PrivateLocations in the indexer.
func (s *privateLocationLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateLocation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateLocation))
	})
	return ret, err
}

// PrivateLocations returns an object that can list and get PrivateLocations.
func (s *privateLocationLister) PrivateLocations(namespace string) PrivateLocationNamespaceLister {
	return privateLocationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateLocationNamespaceLister helps list and get PrivateLocations.
// All objects returned here must be treated as read-only.
type PrivateLocationNamespaceLister interface {
	// List lists all PrivateLocations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateLocation, err error)
	// Get retrieves the PrivateLocation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrivateLocation, error)
	PrivateLocationNamespaceListerExpansion
}

// privateLocationNamespaceLister implements the PrivateLocationNamespaceLister
// interface.
type privateLocationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateLocations in the indexer for a given namespace.
func (s privateLocationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateLocation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateLocation))
	})
	return ret, err
}

// Get retrieves the PrivateLocation from the indexer for a given namespace and name.
func (s privateLocationNamespaceLister) Get(name string) (*v1alpha1.PrivateLocation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatelocation"), name)
	}
	return obj.(*v1alpha1.PrivateLocation), nil
}
