/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/metric/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MetadataLister helps list Metadatas.
// All objects returned here must be treated as read-only.
type MetadataLister interface {
	// List lists all Metadatas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Metadata, err error)
	// Metadatas returns an object that can list and get Metadatas.
	Metadatas(namespace string) MetadataNamespaceLister
	MetadataListerExpansion
}

// metadataLister implements the MetadataLister interface.
type metadataLister struct {
	indexer cache.Indexer
}

// NewMetadataLister returns a new MetadataLister.
func NewMetadataLister(indexer cache.Indexer) MetadataLister {
	return &metadataLister{indexer: indexer}
}

// List lists all Metadatas in the indexer.
func (s *metadataLister) List(selector labels.Selector) (ret []*v1alpha1.Metadata, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Metadata))
	})
	return ret, err
}

// Metadatas returns an object that can list and get Metadatas.
func (s *metadataLister) Metadatas(namespace string) MetadataNamespaceLister {
	return metadataNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MetadataNamespaceLister helps list and get Metadatas.
// All objects returned here must be treated as read-only.
type MetadataNamespaceLister interface {
	// List lists all Metadatas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Metadata, err error)
	// Get retrieves the Metadata from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Metadata, error)
	MetadataNamespaceListerExpansion
}

// metadataNamespaceLister implements the MetadataNamespaceLister
// interface.
type metadataNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Metadatas in the indexer for a given namespace.
func (s metadataNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Metadata, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Metadata))
	})
	return ret, err
}

// Get retrieves the Metadata from the indexer for a given namespace and name.
func (s metadataNamespaceLister) Get(name string) (*v1alpha1.Metadata, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("metadata"), name)
	}
	return obj.(*v1alpha1.Metadata), nil
}
