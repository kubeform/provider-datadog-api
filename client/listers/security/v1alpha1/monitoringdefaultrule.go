/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/security/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitoringDefaultRuleLister helps list MonitoringDefaultRules.
// All objects returned here must be treated as read-only.
type MonitoringDefaultRuleLister interface {
	// List lists all MonitoringDefaultRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitoringDefaultRule, err error)
	// MonitoringDefaultRules returns an object that can list and get MonitoringDefaultRules.
	MonitoringDefaultRules(namespace string) MonitoringDefaultRuleNamespaceLister
	MonitoringDefaultRuleListerExpansion
}

// monitoringDefaultRuleLister implements the MonitoringDefaultRuleLister interface.
type monitoringDefaultRuleLister struct {
	indexer cache.Indexer
}

// NewMonitoringDefaultRuleLister returns a new MonitoringDefaultRuleLister.
func NewMonitoringDefaultRuleLister(indexer cache.Indexer) MonitoringDefaultRuleLister {
	return &monitoringDefaultRuleLister{indexer: indexer}
}

// List lists all MonitoringDefaultRules in the indexer.
func (s *monitoringDefaultRuleLister) List(selector labels.Selector) (ret []*v1alpha1.MonitoringDefaultRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitoringDefaultRule))
	})
	return ret, err
}

// MonitoringDefaultRules returns an object that can list and get MonitoringDefaultRules.
func (s *monitoringDefaultRuleLister) MonitoringDefaultRules(namespace string) MonitoringDefaultRuleNamespaceLister {
	return monitoringDefaultRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitoringDefaultRuleNamespaceLister helps list and get MonitoringDefaultRules.
// All objects returned here must be treated as read-only.
type MonitoringDefaultRuleNamespaceLister interface {
	// List lists all MonitoringDefaultRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitoringDefaultRule, err error)
	// Get retrieves the MonitoringDefaultRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MonitoringDefaultRule, error)
	MonitoringDefaultRuleNamespaceListerExpansion
}

// monitoringDefaultRuleNamespaceLister implements the MonitoringDefaultRuleNamespaceLister
// interface.
type monitoringDefaultRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitoringDefaultRules in the indexer for a given namespace.
func (s monitoringDefaultRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitoringDefaultRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitoringDefaultRule))
	})
	return ret, err
}

// Get retrieves the MonitoringDefaultRule from the indexer for a given namespace and name.
func (s monitoringDefaultRuleNamespaceLister) Get(name string) (*v1alpha1.MonitoringDefaultRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitoringdefaultrule"), name)
	}
	return obj.(*v1alpha1.MonitoringDefaultRule), nil
}
