/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/integration/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsTagFilterLister helps list AwsTagFilters.
// All objects returned here must be treated as read-only.
type AwsTagFilterLister interface {
	// List lists all AwsTagFilters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AwsTagFilter, err error)
	// AwsTagFilters returns an object that can list and get AwsTagFilters.
	AwsTagFilters(namespace string) AwsTagFilterNamespaceLister
	AwsTagFilterListerExpansion
}

// awsTagFilterLister implements the AwsTagFilterLister interface.
type awsTagFilterLister struct {
	indexer cache.Indexer
}

// NewAwsTagFilterLister returns a new AwsTagFilterLister.
func NewAwsTagFilterLister(indexer cache.Indexer) AwsTagFilterLister {
	return &awsTagFilterLister{indexer: indexer}
}

// List lists all AwsTagFilters in the indexer.
func (s *awsTagFilterLister) List(selector labels.Selector) (ret []*v1alpha1.AwsTagFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AwsTagFilter))
	})
	return ret, err
}

// AwsTagFilters returns an object that can list and get AwsTagFilters.
func (s *awsTagFilterLister) AwsTagFilters(namespace string) AwsTagFilterNamespaceLister {
	return awsTagFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsTagFilterNamespaceLister helps list and get AwsTagFilters.
// All objects returned here must be treated as read-only.
type AwsTagFilterNamespaceLister interface {
	// List lists all AwsTagFilters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AwsTagFilter, err error)
	// Get retrieves the AwsTagFilter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AwsTagFilter, error)
	AwsTagFilterNamespaceListerExpansion
}

// awsTagFilterNamespaceLister implements the AwsTagFilterNamespaceLister
// interface.
type awsTagFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsTagFilters in the indexer for a given namespace.
func (s awsTagFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AwsTagFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AwsTagFilter))
	})
	return ret, err
}

// Get retrieves the AwsTagFilter from the indexer for a given namespace and name.
func (s awsTagFilterNamespaceLister) Get(name string) (*v1alpha1.AwsTagFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awstagfilter"), name)
	}
	return obj.(*v1alpha1.AwsTagFilter), nil
}
