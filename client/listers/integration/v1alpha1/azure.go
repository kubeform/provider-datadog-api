/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/integration/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureLister helps list Azures.
// All objects returned here must be treated as read-only.
type AzureLister interface {
	// List lists all Azures in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Azure, err error)
	// Azures returns an object that can list and get Azures.
	Azures(namespace string) AzureNamespaceLister
	AzureListerExpansion
}

// azureLister implements the AzureLister interface.
type azureLister struct {
	indexer cache.Indexer
}

// NewAzureLister returns a new AzureLister.
func NewAzureLister(indexer cache.Indexer) AzureLister {
	return &azureLister{indexer: indexer}
}

// List lists all Azures in the indexer.
func (s *azureLister) List(selector labels.Selector) (ret []*v1alpha1.Azure, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Azure))
	})
	return ret, err
}

// Azures returns an object that can list and get Azures.
func (s *azureLister) Azures(namespace string) AzureNamespaceLister {
	return azureNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureNamespaceLister helps list and get Azures.
// All objects returned here must be treated as read-only.
type AzureNamespaceLister interface {
	// List lists all Azures in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Azure, err error)
	// Get retrieves the Azure from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Azure, error)
	AzureNamespaceListerExpansion
}

// azureNamespaceLister implements the AzureNamespaceLister
// interface.
type azureNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Azures in the indexer for a given namespace.
func (s azureNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Azure, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Azure))
	})
	return ret, err
}

// Get retrieves the Azure from the indexer for a given namespace and name.
func (s azureNamespaceLister) Get(name string) (*v1alpha1.Azure, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azure"), name)
	}
	return obj.(*v1alpha1.Azure), nil
}
