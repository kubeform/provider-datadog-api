/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-datadog-api/apis/integration/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsLister helps list Awses.
// All objects returned here must be treated as read-only.
type AwsLister interface {
	// List lists all Awses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Aws, err error)
	// Awses returns an object that can list and get Awses.
	Awses(namespace string) AwsNamespaceLister
	AwsListerExpansion
}

// awsLister implements the AwsLister interface.
type awsLister struct {
	indexer cache.Indexer
}

// NewAwsLister returns a new AwsLister.
func NewAwsLister(indexer cache.Indexer) AwsLister {
	return &awsLister{indexer: indexer}
}

// List lists all Awses in the indexer.
func (s *awsLister) List(selector labels.Selector) (ret []*v1alpha1.Aws, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Aws))
	})
	return ret, err
}

// Awses returns an object that can list and get Awses.
func (s *awsLister) Awses(namespace string) AwsNamespaceLister {
	return awsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsNamespaceLister helps list and get Awses.
// All objects returned here must be treated as read-only.
type AwsNamespaceLister interface {
	// List lists all Awses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Aws, err error)
	// Get retrieves the Aws from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Aws, error)
	AwsNamespaceListerExpansion
}

// awsNamespaceLister implements the AwsNamespaceLister
// interface.
type awsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Awses in the indexer for a given namespace.
func (s awsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Aws, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Aws))
	})
	return ret, err
}

// Get retrieves the Aws from the indexer for a given namespace and name.
func (s awsNamespaceLister) Get(name string) (*v1alpha1.Aws, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aws"), name)
	}
	return obj.(*v1alpha1.Aws), nil
}
